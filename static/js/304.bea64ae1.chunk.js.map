{"version":3,"file":"static/js/304.bea64ae1.chunk.js","mappings":"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","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/ThemoviedbApi/Api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesCard = styled.li`\n  padding: 4px;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px;\n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: orangered;\n\n  font-size: 12px;\n  font-weight: 600;\n`;\n","import {\n  MoviesCard,\n  MoviesImg,\n  MoviesCardInfo,\n  MoviesTitle,\n  MoviesVote,\n  StyledLink,\n} from './MovieItem.styled';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport const MovieItem = ({ id, title, imagePath, vote }) => {\n  const { pathname, search } = useLocation();\n  const fromPage = `${pathname}${search}`;\n\n  return (\n    <MoviesCard>\n      <StyledLink to={`/movies/${id}`} state={{ from: fromPage }}>\n        <MoviesImg src={imagePath} alt={title} />\n        <MoviesCardInfo>\n          <MoviesTitle>{title}</MoviesTitle>\n          <MoviesVote>{vote}</MoviesVote>\n        </MoviesCardInfo>\n      </StyledLink>\n    </MoviesCard>\n  );\n};\n\nMovieItem.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const HomeTitle = styled.h2`\n  padding-top: 20px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;","import GetApi from 'services/ThemoviedbApi/Api';\nimport { useEffect, useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\nimport { MoviesList, HomeTitle } from './Home.styled';\nconst BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nconst PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\n\nconst Home = () => {\n  const [trandMovies, setTrandMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    getTrandingMovies();\n\n    async function getTrandingMovies() {\n      try {\n        const fetchMovies = await GetApi.getTrendingMovies();\n        setTrandMovies(fetchMovies);\n      } catch (error) {\n        console.log(`something wrong`);\n      } finally {\n        setLoading(false);\n      }\n    }\n  }, []);\n\n  return (\n    <main>\n      <HomeTitle> Tranding today</HomeTitle>\n      {loading && <Loader />}\n      <MoviesList>\n        {trandMovies.map(({ id, title, poster_path, vote_averange }) => (\n          <MovieItem\n            key={id}\n            id={id}\n            title={title}\n            imagePath={\n              poster_path ? BASE_IMAGE_URL + poster_path : PlACEHOLDER_IMAGE_URL\n            }\n            vote={vote_averange ? vote_averange.toFied(1) : `no vote`}\n          />\n        ))}\n      </MoviesList>\n    </main>\n  );\n};\n\nexport default Home;\n","// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews\n// for tranding\n// const URL_TRANDING = 'https://api.themoviedb.org/3/trending/movie/day';\n// // for search by name\n// const URL_SEARCH_BY_NAME = 'https://api.themoviedb.org/3/search/movie';\n// // for details\n// const URL_FILM_ADD_INFO = 'https://api.themoviedb.org/3/movie/';\n\nimport axios from 'axios';\nconst API_KEY = '97c31631b31361f75213aa46907a2e0a';\n\nconst apiCase = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nasync function getTrendingMovies() {\n  const response = await apiCase.get('trending/movie/day');\n  const trendingMovies = response.data.results;\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n  return trendingMovies;\n}\n\nasync function getMovieById(id) {\n  const { data } = await apiCase.get(`movie/${id}`);\n  return data;\n}\n\nasync function searchMovieQuery(query) {\n  const { response } = await apiCase.get(`search/movie/?query=${query}`);\n  const searchMovies = response.data.results;\n  if (!searchMovies.length) {\n    throw new Error('Nothing was found for your request');\n  }\n  return searchMovies;\n}\n\nasync function fetchSearchMovies(query) {\n  const response = await apiCase.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\nasync function getMovieCredits(id) {\n  const response = await apiCase.get(`movie/${id}/credits`);\n  const cast = response.data.cast;\n  if (!cast.length) {\n    throw new Error('cast not found');\n  }\n  return cast;\n}\n\nasync function getMovieReviews(id) {\n  const response = await apiCase.get(`movie/${id}/reviews`);\n  const reviews = response.data.results;\n  if (!reviews) {\n    throw new Error(`reviews not found`);\n  }\n  return reviews;\n}\n\nconst GetApi = {\n  getTrendingMovies,\n  getMovieById,\n  searchMovieQuery,\n  fetchSearchMovies,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default GetApi;\n"],"names":["MoviesCard","styled","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","MovieItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","HomeTitle","MoviesList","useState","trandMovies","setTrandMovies","loading","setLoading","useEffect","GetApi","fetchMovies","console","log","getTrandingMovies","Loader","map","poster_path","vote_averange","toFied","apiCase","axios","baseURL","params","api_key","language","getTrendingMovies","get","response","trendingMovies","data","results","length","Error","getMovieById","searchMovieQuery","query","searchMovies","fetchSearchMovies","getMovieCredits","cast","getMovieReviews","reviews"],"sourceRoot":""}