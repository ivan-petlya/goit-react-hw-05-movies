{"version":3,"file":"static/js/451.ea2687de.chunk.js","mappings":"kRAEaA,EAAcC,EAAAA,GAAAA,GAAH,qLAOXC,EAAUD,EAAAA,GAAAA,IAAH,8DAKPE,EAAWF,EAAAA,GAAAA,IAAH,oKASRG,EAAWH,EAAAA,GAAAA,EAAH,6C,SCpBRI,EAAW,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC1C,OACE,UAACR,EAAD,YACE,SAACE,EAAD,CAASO,IAAKH,EAAWI,IAAKH,EAAMI,MAAM,SAC1C,UAACR,EAAD,YACE,uBAAII,KACJ,UAACH,EAAD,yBAAsBI,UAI7B,ECXYI,EAAWX,EAAAA,GAAAA,GAAH,6ICoFrB,EAvCa,WACX,IAAQY,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,+GAE4BC,EAAAA,EAAAA,gBAAuBN,GAFnD,OAEUO,EAFV,OAIUC,EACJD,EAAUE,OAAS,GAAKF,EAAUG,MAAM,EAAG,IAAMH,EACnDI,QAAQC,IAAIJ,GACZJ,EAAQI,GAPZ,gDASIG,QAAQC,IAAR,MATJ,0DAHc,0DACdC,EAcD,GAAE,CAACb,IAECG,GAGH,SAACJ,EAAD,UACGI,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAetB,EAApC,EAAoCA,UAApC,OACR,SAACH,EAAD,CAEEC,UACEuB,EAvEQ,kCAuEwBA,EAtEjB,sCAwEjBtB,KAAMuB,EACNtB,UAAWA,GALNoB,EAFC,MAJI,IAgBnB,C,qDCrEKG,E,OAAUC,EAAAA,OAAa,CAC3BC,QAAS,gCACTC,OAAQ,CACNC,QALY,mCAMZC,SAAU,WAICC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,sGACyBN,EAAQO,IAAI,sBADrC,UACQC,EADR,QAEQC,EAAiBD,EAASE,KAAKC,SACjBpB,OAHtB,sBAIU,IAAIqB,MAAJ,+BAJV,gCAMSH,GANT,kEASeI,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BhB,GAA5B,yFACyBG,EAAQO,IAAR,gBAAqBV,IAD9C,uBACUa,EADV,EACUA,KADV,kBAESA,GAFT,kEAKeI,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,2FAC6Bf,EAAQO,IAAR,8BAAmCQ,IADhE,mBACUP,EADV,EACUA,UACFQ,EAAeR,EAASE,KAAKC,SACjBpB,OAHpB,sBAIU,IAAIqB,MAAM,sCAJpB,gCAMSI,GANT,kEASeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCF,GAAjC,yFACyBf,EAAQO,IAAR,6BAAkCQ,IAD3D,UACQP,EADR,QAGQQ,EAAeR,EAASE,KAAKC,SAEjBpB,OALpB,sBAMU,IAAIqB,MAAJ,4EANV,gCAWSI,GAXT,kEAcerB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BE,GAA/B,yFACyBG,EAAQO,IAAR,gBAAqBV,EAArB,aADzB,UACQW,EADR,QAEQvB,EAAOuB,EAASE,KAAKzB,MACjBM,OAHZ,sBAIU,IAAIqB,MAAM,kBAJpB,gCAMS3B,GANT,kEASeiC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BrB,GAA/B,yFACyBG,EAAQO,IAAR,gBAAqBV,EAArB,aADzB,UACQW,EADR,OAEQW,EAAUX,EAASE,KAAKC,QAFhC,sBAIU,IAAIC,MAAJ,qBAJV,gCAMSO,GANT,kEASA,IAAM/B,EAAS,CACbkB,kBAhEF,WAQeA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyDbO,aAzDF,SAS4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAiDbC,iBAjDF,SAKgC,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA6CbG,kBA7CF,SASiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAqCbtB,gBArCF,SAc+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAwBbuB,gBAxBF,SAS+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAkBf,K","sources":["components/Cast/CastItem/CastItem.styled.js","components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/ThemoviedbApi/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CardWrapper = styled.li`\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%),\n    0 2px 1px -1px rgb(0 0 0 / 12%);\n`;\n\nexport const CardImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const CardInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 4px;\n  text-align: center;\n  font-size: 12px;\n`;\n\nexport const CardText = styled.p`\n  margin-top: auto;\n`;\n","import PropTypes from 'prop-types';\nimport { CardWrapper, CardImg, CardInfo, CardText } from './CastItem.styled';\n\nexport const CastItem = ({ imagePath, name, character }) => {\n  return (\n    <CardWrapper>\n      <CardImg src={imagePath} alt={name} width=\"100\" />\n      <CardInfo>\n        <p>{name}</p>\n        <CardText> Character:{character}</CardText>\n      </CardInfo>\n    </CardWrapper>\n  );\n};\nCastItem.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  padding: 16px 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  gap: 16px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport GetApi from 'services/ThemoviedbApi/Api';\nimport { CastItem } from './CastItem/CastItem';\nimport { CastList } from './Cast.styled';\nconst BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nconst PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\n\n// const Cast = () => {\n//   const { movieId } = useParams();\n//   const [cast, setCast] = useState([]);\n\n//   useEffect(() => {\n//     getCredits();\n\n//     async function getCredits() {\n//       try {\n//         const getCast = await GetApi.getMovieCredits(movieId);\n//         const actors = getCast.length > 16 ? getCast.slice(0, 16) : getCast;\n//         console.log(actors);\n//         setCast(actors);\n//         console.log(actors);\n//       } catch (error) {\n//         console.log(`something wrong, error`);\n//       }\n//     }\n//   }, [movieId]);\n\n//   if (!cast) return null;\n\n//   return (\n//     <CastList>\n//       {cast.map(({ id, profile_path, original_name, character }) => (\n//         <CastItem\n//           key={id}\n//           imagePath={\n//             profile_path ? BASE_IMAGE_URL + profile_path : PlACEHOLDER_IMAGE_URL\n//           }\n//           name={original_name}\n//           character={character}\n//         />\n//       ))}\n//     </CastList>\n//   );\n// };\n// export default Cast;\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCredits();\n\n    async function getMovieCredits() {\n      try {\n        const fetchCast = await GetApi.getMovieCredits(movieId);\n\n        const actors =\n          fetchCast.length > 16 ? fetchCast.slice(0, 16) : fetchCast;\n        console.log(actors);\n        setCast(actors);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [movieId]);\n\n  if (!cast) return null;\n\n  return (\n    <CastList>\n      {cast.map(({ id, profile_path, original_name, character }) => (\n        <CastItem\n          key={id}\n          imagePath={\n            profile_path ? BASE_IMAGE_URL + profile_path : PlACEHOLDER_IMAGE_URL\n          }\n          name={original_name}\n          character={character}\n        />\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews\n// for tranding\n// const URL_TRANDING = 'https://api.themoviedb.org/3/trending/movie/day';\n// // for search by name\n// const URL_SEARCH_BY_NAME = 'https://api.themoviedb.org/3/search/movie';\n// // for details\n// const URL_FILM_ADD_INFO = 'https://api.themoviedb.org/3/movie/';\n\nimport axios from 'axios';\nconst API_KEY = '97c31631b31361f75213aa46907a2e0a';\n\nconst apiCase = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nasync function getTrendingMovies() {\n  const response = await apiCase.get('trending/movie/day');\n  const trendingMovies = response.data.results;\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n  return trendingMovies;\n}\n\nasync function getMovieById(id) {\n  const { data } = await apiCase.get(`movie/${id}`);\n  return data;\n}\n\nasync function searchMovieQuery(query) {\n  const { response } = await apiCase.get(`search/movie/?query=${query}`);\n  const searchMovies = response.data.results;\n  if (!searchMovies.length) {\n    throw new Error('Nothing was found for your request');\n  }\n  return searchMovies;\n}\n\nasync function fetchSearchMovies(query) {\n  const response = await apiCase.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\nasync function getMovieCredits(id) {\n  const response = await apiCase.get(`movie/${id}/credits`);\n  const cast = response.data.cast;\n  if (!cast.length) {\n    throw new Error('cast not found');\n  }\n  return cast;\n}\n\nasync function getMovieReviews(id) {\n  const response = await apiCase.get(`movie/${id}/reviews`);\n  const reviews = response.data.results;\n  if (!reviews) {\n    throw new Error(`reviews not found`);\n  }\n  return reviews;\n}\n\nconst GetApi = {\n  getTrendingMovies,\n  getMovieById,\n  searchMovieQuery,\n  fetchSearchMovies,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default GetApi;\n"],"names":["CardWrapper","styled","CardImg","CardInfo","CardText","CastItem","imagePath","name","character","src","alt","width","CastList","movieId","useParams","useState","cast","setCast","useEffect","GetApi","fetchCast","actors","length","slice","console","log","getMovieCredits","map","id","profile_path","original_name","apiCase","axios","baseURL","params","api_key","language","getTrendingMovies","get","response","trendingMovies","data","results","Error","getMovieById","searchMovieQuery","query","searchMovies","fetchSearchMovies","getMovieReviews","reviews"],"sourceRoot":""}