{"version":3,"file":"static/js/253.bfc96928.chunk.js","mappings":"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","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","pages/Movies/Movies.styled.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/ThemoviedbApi/Api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesCard = styled.li`\n  padding: 4px;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px;\n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: orangered;\n\n  font-size: 12px;\n  font-weight: 600;\n`;\n","import {\n  MoviesCard,\n  MoviesImg,\n  MoviesCardInfo,\n  MoviesTitle,\n  MoviesVote,\n  StyledLink,\n} from './MovieItem.styled';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport const MovieItem = ({ id, title, imagePath, vote }) => {\n  const { pathname, search } = useLocation();\n  const fromPage = `${pathname}${search}`;\n\n  return (\n    <MoviesCard>\n      <StyledLink to={`/movies/${id}`} state={{ from: fromPage }}>\n        <MoviesImg src={imagePath} alt={title} />\n        <MoviesCardInfo>\n          <MoviesTitle>{title}</MoviesTitle>\n          <MoviesVote>{vote}</MoviesVote>\n        </MoviesCardInfo>\n      </StyledLink>\n    </MoviesCard>\n  );\n};\n\nMovieItem.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  padding: 16px 0;\n`;\n\nexport const Form = styled.form`\n  position: relative;\n  width: 100%;\n  max-width: 350px;\n  margin: 0 auto;\n  border-radius: 4px;\n  overflow: hidden;\n`;\n\nexport const FormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  height: 33px;\n  font-size: 18px;\n  border: 1px solid black;\n  border-radius: 4px;\n  outline: none;\n  padding: 4px;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 16px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  position: absolute;\n  right: 0;\n  top: 0;\n  height: 100%;\n  display: inline-block;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-right: 6px;\n  padding-left: 7px;\n  cursor: pointer;\n  border: 1px solid orangered;\n  outline: none;\n\n  color: white;\n  background-color: orangered;\n\n  opacity: 1;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  FormContainer,\n  Form,\n  FormInput,\n  FormButton,\n} from './SearchForm.styled';\nimport { useState } from 'react';\nimport { Notify } from 'notiflix';\n\nexport default function SearchForm({ onSubmit, onChange }) {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = evt => {\n    setQuery(evt.currentTarget.value.toLowerCase());\n    onChange(evt.currentTarget.value.toLowerCase());\n  };\n\n  const handleSearchSubmit = evt => {\n    evt.preventDefault();\n\n    if (query.trim() === '') {\n      return Notify.info('Please enter your query!');\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <FormContainer>\n      <Form onSubmit={handleSearchSubmit}>\n        <FormButton type=\"submit\">\n          <span>üîç</span>\n        </FormButton>\n\n        <FormInput\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n      </Form>\n    </FormContainer>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { MoviesList } from './Movies.styled';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport Loader from 'components/Loader/Loader';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\nimport GetApi from 'services/ThemoviedbApi/Api';\nimport Notiflix from 'notiflix';\n\nconst BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nconst PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('search') ?? '');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    setLoading(true);\n    getSearchMovies();\n\n    //   async function searchMovies() {\n    //     try {\n    //       const fetchMovies = await GetApi.searchMovieQuery(query);\n    //       console.log(fetchMovies);\n    //       setMovies(fetchMovies);\n    //     } catch (error) {\n    //       console.log(`somethig wrong`);\n    //       Notiflix.Notify.warning(\n    //         `No movies were found matching your search. try changing your query`\n    //       );\n    //     } finally {\n    //       setLoading(false);\n    //     }\n    //   }\n    // }, [query]);\n\n    async function getSearchMovies() {\n      try {\n        const fetchMovies = await GetApi.fetchSearchMovies(query);\n        console.log(fetchMovies);\n        setMovies(fetchMovies);\n      } catch (error) {\n        console.log(`something wrong`);\n        Notiflix.Notify.warning(\n          `No movies were found matching your search. try changing your query`\n        );\n      } finally {\n        setLoading(false);\n      }\n    }\n  }, [query]);\n\n  const handleFormSubmit = query => {\n    setQuery(query);\n    setMovies([]);\n  };\n  const updateQueryString = value => {\n    setSearchParams(value !== '' ? { search: value } : {});\n  };\n  return (\n    <main>\n      <SearchForm\n        onSubmit={handleFormSubmit}\n        onChange={updateQueryString}\n      ></SearchForm>\n      {loading && <Loader />}\n      <MoviesList>\n        {movies.map(({ id, title, poster_path, vote_averange }) => (\n          <MovieItem\n            key={id}\n            id={id}\n            title={title}\n            imagePath={\n              poster_path ? BASE_IMAGE_URL + poster_path : PlACEHOLDER_IMAGE_URL\n            }\n            vote={vote_averange ? vote_averange.toFixed(1) : `No vote`}\n          />\n        ))}\n      </MoviesList>\n    </main>\n  );\n};\nexport default Movies;\n","// /trending/get-trending —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.\n// /search/search-movies –ø–æ–∏—Å–∫ –∫–∏–Ω–æ—Ñ–∏–ª—å–º–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∏–ª—å–º–æ–≤.\n// /movies/get-movie-details –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∏–Ω–æ—Ñ–∏–ª—å–º–∞.\n// /movies/get-movie-credits –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–∫—Ç—ë—Ä—Å–∫–æ–º —Å–æ—Å—Ç–∞–≤–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∏–Ω–æ—Ñ–∏–ª—å–º–∞.\n// /movies/get-movie-reviews\n// for tranding\n// const URL_TRANDING = 'https://api.themoviedb.org/3/trending/movie/day';\n// // for search by name\n// const URL_SEARCH_BY_NAME = 'https://api.themoviedb.org/3/search/movie';\n// // for details\n// const URL_FILM_ADD_INFO = 'https://api.themoviedb.org/3/movie/';\n\nimport axios from 'axios';\nconst API_KEY = '97c31631b31361f75213aa46907a2e0a';\n\nconst apiCase = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nasync function getTrendingMovies() {\n  const response = await apiCase.get('trending/movie/day');\n  const trendingMovies = response.data.results;\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n  return trendingMovies;\n}\n\nasync function getMovieById(id) {\n  const { data } = await apiCase.get(`movie/${id}`);\n  return data;\n}\n\nasync function searchMovieQuery(query) {\n  const { response } = await apiCase.get(`search/movie/?query=${query}`);\n  const searchMovies = response.data.results;\n  if (!searchMovies.length) {\n    throw new Error('Nothing was found for your request');\n  }\n  return searchMovies;\n}\n\nasync function fetchSearchMovies(query) {\n  const response = await apiCase.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\nasync function getMovieCredits(id) {\n  const response = await apiCase.get(`movie/${id}/credits`);\n  const cast = response.data.cast;\n  if (!cast.length) {\n    throw new Error('cast not found');\n  }\n  return cast;\n}\n\nasync function getMovieReviews(id) {\n  const response = await apiCase.get(`movie/${id}/reviews`);\n  const reviews = response.data.results;\n  if (!reviews) {\n    throw new Error(`reviews not found`);\n  }\n  return reviews;\n}\n\nconst GetApi = {\n  getTrendingMovies,\n  getMovieById,\n  searchMovieQuery,\n  fetchSearchMovies,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default GetApi;\n"],"names":["MoviesCard","styled","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","MovieItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","MoviesList","FormContainer","Form","FormInput","FormButton","SearchForm","onSubmit","onChange","useState","query","setQuery","evt","preventDefault","trim","Notify","type","name","autoComplete","autoFocus","placeholder","value","currentTarget","toLowerCase","useSearchParams","searchParams","setSearchParams","get","movies","setMovies","loading","setLoading","useEffect","GetApi","fetchMovies","console","log","Notiflix","getSearchMovies","Loader","map","poster_path","vote_averange","toFixed","apiCase","axios","baseURL","params","api_key","language","getTrendingMovies","response","trendingMovies","data","results","length","Error","getMovieById","searchMovieQuery","searchMovies","fetchSearchMovies","getMovieCredits","cast","getMovieReviews","reviews"],"sourceRoot":""}