{"version":3,"file":"static/js/779.d6b34970.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/ThemoviedbApi/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  padding: 16px 0;\n  list-style: disc;\n  margin-left: 10px;\n`;\n\nexport const ReviewsItem = styled.li`\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid #eeeeee;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), 0px 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n`;\n\nexport const ReviewsTitle = styled.h4`\n  margin-bottom: 15px;\n`;\n\nexport const Message = styled.p`\n  padding: 14px 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport GetApi from 'services/ThemoviedbApi/Api';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewsTitle,\n  Message,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getReviews();\n\n    async function getReviews() {\n      const fetchReviews = await GetApi.getMovieReviews(movieId);\n      setReviews(fetchReviews);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsItem key={id}>\n              <ReviewsTitle>Author:{author}</ReviewsTitle>\n              <p> {content}</p>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <Message>No reviews for this movie</Message>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews\n// for tranding\n// const URL_TRANDING = 'https://api.themoviedb.org/3/trending/movie/day';\n// // for search by name\n// const URL_SEARCH_BY_NAME = 'https://api.themoviedb.org/3/search/movie';\n// // for details\n// const URL_FILM_ADD_INFO = 'https://api.themoviedb.org/3/movie/';\n\nimport axios from 'axios';\nconst API_KEY = '97c31631b31361f75213aa46907a2e0a';\n\nconst apiCase = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nasync function getTrendingMovies() {\n  const response = await apiCase.get('trending/movie/day');\n  const trendingMovies = response.data.results;\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n  return trendingMovies;\n}\n\nasync function getMovieById(id) {\n  const { data } = await apiCase.get(`movie/${id}`);\n  return data;\n}\n\nasync function searchMovieQuery(query) {\n  const { response } = await apiCase.get(`search/movie/?query=${query}`);\n  const searchMovies = response.data.results;\n  if (!searchMovies.length) {\n    throw new Error('Nothing was found for your request');\n  }\n  return searchMovies;\n}\n\nasync function fetchSearchMovies(query) {\n  const response = await apiCase.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\nasync function getMovieCredits(id) {\n  const response = await apiCase.get(`movie/${id}/credits`);\n  const cast = response.data.cast;\n  if (!cast.length) {\n    throw new Error('cast not found');\n  }\n  return cast;\n}\n\nasync function getMovieReviews(id) {\n  const response = await apiCase.get(`movie/${id}/reviews`);\n  const reviews = response.data.results;\n  if (!reviews) {\n    throw new Error(`reviews not found`);\n  }\n  return reviews;\n}\n\nconst GetApi = {\n  getTrendingMovies,\n  getMovieById,\n  searchMovieQuery,\n  fetchSearchMovies,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default GetApi;\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsTitle","Message","movieId","useParams","useState","reviews","setReviews","useEffect","GetApi","fetchReviews","getReviews","length","map","id","author","content","apiCase","axios","baseURL","params","api_key","language","getTrendingMovies","get","response","trendingMovies","data","results","Error","getMovieById","searchMovieQuery","query","searchMovies","fetchSearchMovies","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}